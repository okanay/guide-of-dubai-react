/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'
import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LangNotFoundRouteImport } from './routes/$lang/not-found'
import { Route as LangErrorRouteImport } from './routes/$lang/error'
import { Route as LangPublicRouteRouteImport } from './routes/$lang/_public/route'
import { Route as LangPublicIndexRouteImport } from './routes/$lang/_public/index'
import { Route as LangPublicToursIndexRouteImport } from './routes/$lang/_public/tours.index'
import { Route as LangPublicTicketsIndexRouteImport } from './routes/$lang/_public/tickets.index'
import { ServerRoute as SitemapDotxmlServerRouteImport } from './routes/sitemap[.]xml'
import { ServerRoute as RssDotxmlServerRouteImport } from './routes/rss[.]xml'
import { ServerRoute as RobotsDottxtServerRouteImport } from './routes/robots[.]txt'

const LangRouteImport = createFileRoute('/$lang')()
const rootServerRouteImport = createServerRootRoute()

const LangRoute = LangRouteImport.update({
  id: '/$lang',
  path: '/$lang',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LangNotFoundRoute = LangNotFoundRouteImport.update({
  id: '/not-found',
  path: '/not-found',
  getParentRoute: () => LangRoute,
} as any)
const LangErrorRoute = LangErrorRouteImport.update({
  id: '/error',
  path: '/error',
  getParentRoute: () => LangRoute,
} as any)
const LangPublicRouteRoute = LangPublicRouteRouteImport.update({
  id: '/_public',
  getParentRoute: () => LangRoute,
} as any)
const LangPublicIndexRoute = LangPublicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LangPublicRouteRoute,
} as any)
const LangPublicToursIndexRoute = LangPublicToursIndexRouteImport.update({
  id: '/tours/',
  path: '/tours/',
  getParentRoute: () => LangPublicRouteRoute,
} as any)
const LangPublicTicketsIndexRoute = LangPublicTicketsIndexRouteImport.update({
  id: '/tickets/',
  path: '/tickets/',
  getParentRoute: () => LangPublicRouteRoute,
} as any)
const SitemapDotxmlServerRoute = SitemapDotxmlServerRouteImport.update({
  id: '/sitemap.xml',
  path: '/sitemap.xml',
  getParentRoute: () => rootServerRouteImport,
} as any)
const RssDotxmlServerRoute = RssDotxmlServerRouteImport.update({
  id: '/rss.xml',
  path: '/rss.xml',
  getParentRoute: () => rootServerRouteImport,
} as any)
const RobotsDottxtServerRoute = RobotsDottxtServerRouteImport.update({
  id: '/robots.txt',
  path: '/robots.txt',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$lang': typeof LangPublicRouteRouteWithChildren
  '/$lang/error': typeof LangErrorRoute
  '/$lang/not-found': typeof LangNotFoundRoute
  '/$lang/': typeof LangPublicIndexRoute
  '/$lang/tickets': typeof LangPublicTicketsIndexRoute
  '/$lang/tours': typeof LangPublicToursIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$lang': typeof LangPublicIndexRoute
  '/$lang/error': typeof LangErrorRoute
  '/$lang/not-found': typeof LangNotFoundRoute
  '/$lang/tickets': typeof LangPublicTicketsIndexRoute
  '/$lang/tours': typeof LangPublicToursIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$lang': typeof LangRouteWithChildren
  '/$lang/_public': typeof LangPublicRouteRouteWithChildren
  '/$lang/error': typeof LangErrorRoute
  '/$lang/not-found': typeof LangNotFoundRoute
  '/$lang/_public/': typeof LangPublicIndexRoute
  '/$lang/_public/tickets/': typeof LangPublicTicketsIndexRoute
  '/$lang/_public/tours/': typeof LangPublicToursIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$lang'
    | '/$lang/error'
    | '/$lang/not-found'
    | '/$lang/'
    | '/$lang/tickets'
    | '/$lang/tours'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$lang'
    | '/$lang/error'
    | '/$lang/not-found'
    | '/$lang/tickets'
    | '/$lang/tours'
  id:
    | '__root__'
    | '/'
    | '/$lang'
    | '/$lang/_public'
    | '/$lang/error'
    | '/$lang/not-found'
    | '/$lang/_public/'
    | '/$lang/_public/tickets/'
    | '/$lang/_public/tours/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LangRoute: typeof LangRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/robots.txt': typeof RobotsDottxtServerRoute
  '/rss.xml': typeof RssDotxmlServerRoute
  '/sitemap.xml': typeof SitemapDotxmlServerRoute
}
export interface FileServerRoutesByTo {
  '/robots.txt': typeof RobotsDottxtServerRoute
  '/rss.xml': typeof RssDotxmlServerRoute
  '/sitemap.xml': typeof SitemapDotxmlServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/robots.txt': typeof RobotsDottxtServerRoute
  '/rss.xml': typeof RssDotxmlServerRoute
  '/sitemap.xml': typeof SitemapDotxmlServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/robots.txt' | '/rss.xml' | '/sitemap.xml'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/robots.txt' | '/rss.xml' | '/sitemap.xml'
  id: '__root__' | '/robots.txt' | '/rss.xml' | '/sitemap.xml'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  RobotsDottxtServerRoute: typeof RobotsDottxtServerRoute
  RssDotxmlServerRoute: typeof RssDotxmlServerRoute
  SitemapDotxmlServerRoute: typeof SitemapDotxmlServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$lang': {
      id: '/$lang'
      path: '/$lang'
      fullPath: '/$lang'
      preLoaderRoute: typeof LangRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$lang/not-found': {
      id: '/$lang/not-found'
      path: '/not-found'
      fullPath: '/$lang/not-found'
      preLoaderRoute: typeof LangNotFoundRouteImport
      parentRoute: typeof LangRoute
    }
    '/$lang/error': {
      id: '/$lang/error'
      path: '/error'
      fullPath: '/$lang/error'
      preLoaderRoute: typeof LangErrorRouteImport
      parentRoute: typeof LangRoute
    }
    '/$lang/_public': {
      id: '/$lang/_public'
      path: '/$lang'
      fullPath: '/$lang'
      preLoaderRoute: typeof LangPublicRouteRouteImport
      parentRoute: typeof LangRoute
    }
    '/$lang/_public/': {
      id: '/$lang/_public/'
      path: '/'
      fullPath: '/$lang/'
      preLoaderRoute: typeof LangPublicIndexRouteImport
      parentRoute: typeof LangPublicRouteRoute
    }
    '/$lang/_public/tours/': {
      id: '/$lang/_public/tours/'
      path: '/tours'
      fullPath: '/$lang/tours'
      preLoaderRoute: typeof LangPublicToursIndexRouteImport
      parentRoute: typeof LangPublicRouteRoute
    }
    '/$lang/_public/tickets/': {
      id: '/$lang/_public/tickets/'
      path: '/tickets'
      fullPath: '/$lang/tickets'
      preLoaderRoute: typeof LangPublicTicketsIndexRouteImport
      parentRoute: typeof LangPublicRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/sitemap.xml': {
      id: '/sitemap.xml'
      path: '/sitemap.xml'
      fullPath: '/sitemap.xml'
      preLoaderRoute: typeof SitemapDotxmlServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/rss.xml': {
      id: '/rss.xml'
      path: '/rss.xml'
      fullPath: '/rss.xml'
      preLoaderRoute: typeof RssDotxmlServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/robots.txt': {
      id: '/robots.txt'
      path: '/robots.txt'
      fullPath: '/robots.txt'
      preLoaderRoute: typeof RobotsDottxtServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface LangPublicRouteRouteChildren {
  LangPublicIndexRoute: typeof LangPublicIndexRoute
  LangPublicTicketsIndexRoute: typeof LangPublicTicketsIndexRoute
  LangPublicToursIndexRoute: typeof LangPublicToursIndexRoute
}

const LangPublicRouteRouteChildren: LangPublicRouteRouteChildren = {
  LangPublicIndexRoute: LangPublicIndexRoute,
  LangPublicTicketsIndexRoute: LangPublicTicketsIndexRoute,
  LangPublicToursIndexRoute: LangPublicToursIndexRoute,
}

const LangPublicRouteRouteWithChildren = LangPublicRouteRoute._addFileChildren(
  LangPublicRouteRouteChildren,
)

interface LangRouteChildren {
  LangPublicRouteRoute: typeof LangPublicRouteRouteWithChildren
  LangErrorRoute: typeof LangErrorRoute
  LangNotFoundRoute: typeof LangNotFoundRoute
}

const LangRouteChildren: LangRouteChildren = {
  LangPublicRouteRoute: LangPublicRouteRouteWithChildren,
  LangErrorRoute: LangErrorRoute,
  LangNotFoundRoute: LangNotFoundRoute,
}

const LangRouteWithChildren = LangRoute._addFileChildren(LangRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LangRoute: LangRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  RobotsDottxtServerRoute: RobotsDottxtServerRoute,
  RssDotxmlServerRoute: RssDotxmlServerRoute,
  SitemapDotxmlServerRoute: SitemapDotxmlServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
