/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'
import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LangNotFoundRouteImport } from './routes/$lang/not-found'
import { Route as LangErrorRouteImport } from './routes/$lang/error'
import { Route as LangPublicRouteRouteImport } from './routes/$lang/_public/route'
import { Route as LangPublicIndexRouteImport } from './routes/$lang/_public/index'
import { Route as LangPublicActivitiesRouteRouteImport } from './routes/$lang/_public/activities.route'
import { Route as LangPublicTransferIndexRouteImport } from './routes/$lang/_public/transfer.index'
import { Route as LangPublicToursIndexRouteImport } from './routes/$lang/_public/tours.index'
import { Route as LangPublicSafariTourIndexRouteImport } from './routes/$lang/_public/safari-tour.index'
import { Route as LangPublicRentACarIndexRouteImport } from './routes/$lang/_public/rent-a-car.index'
import { Route as LangPublicHotelsIndexRouteImport } from './routes/$lang/_public/hotels.index'
import { Route as LangPublicFlightIndexRouteImport } from './routes/$lang/_public/flight.index'
import { Route as LangPublicAllIndexRouteImport } from './routes/$lang/_public/all.index'
import { Route as LangPublicActivitiesIndexRouteImport } from './routes/$lang/_public/activities.index'
import { Route as LangPublicActivitiesSearchRouteImport } from './routes/$lang/_public/activities.search'
import { ServerRoute as SitemapDotxmlServerRouteImport } from './routes/sitemap[.]xml'
import { ServerRoute as RssDotxmlServerRouteImport } from './routes/rss[.]xml'
import { ServerRoute as RobotsDottxtServerRouteImport } from './routes/robots[.]txt'

const LangRouteImport = createFileRoute('/$lang')()
const rootServerRouteImport = createServerRootRoute()

const LangRoute = LangRouteImport.update({
  id: '/$lang',
  path: '/$lang',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LangNotFoundRoute = LangNotFoundRouteImport.update({
  id: '/not-found',
  path: '/not-found',
  getParentRoute: () => LangRoute,
} as any)
const LangErrorRoute = LangErrorRouteImport.update({
  id: '/error',
  path: '/error',
  getParentRoute: () => LangRoute,
} as any)
const LangPublicRouteRoute = LangPublicRouteRouteImport.update({
  id: '/_public',
  getParentRoute: () => LangRoute,
} as any)
const LangPublicIndexRoute = LangPublicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LangPublicRouteRoute,
} as any)
const LangPublicActivitiesRouteRoute =
  LangPublicActivitiesRouteRouteImport.update({
    id: '/activities',
    path: '/activities',
    getParentRoute: () => LangPublicRouteRoute,
  } as any)
const LangPublicTransferIndexRoute = LangPublicTransferIndexRouteImport.update({
  id: '/transfer/',
  path: '/transfer/',
  getParentRoute: () => LangPublicRouteRoute,
} as any)
const LangPublicToursIndexRoute = LangPublicToursIndexRouteImport.update({
  id: '/tours/',
  path: '/tours/',
  getParentRoute: () => LangPublicRouteRoute,
} as any)
const LangPublicSafariTourIndexRoute =
  LangPublicSafariTourIndexRouteImport.update({
    id: '/safari-tour/',
    path: '/safari-tour/',
    getParentRoute: () => LangPublicRouteRoute,
  } as any)
const LangPublicRentACarIndexRoute = LangPublicRentACarIndexRouteImport.update({
  id: '/rent-a-car/',
  path: '/rent-a-car/',
  getParentRoute: () => LangPublicRouteRoute,
} as any)
const LangPublicHotelsIndexRoute = LangPublicHotelsIndexRouteImport.update({
  id: '/hotels/',
  path: '/hotels/',
  getParentRoute: () => LangPublicRouteRoute,
} as any)
const LangPublicFlightIndexRoute = LangPublicFlightIndexRouteImport.update({
  id: '/flight/',
  path: '/flight/',
  getParentRoute: () => LangPublicRouteRoute,
} as any)
const LangPublicAllIndexRoute = LangPublicAllIndexRouteImport.update({
  id: '/all/',
  path: '/all/',
  getParentRoute: () => LangPublicRouteRoute,
} as any)
const LangPublicActivitiesIndexRoute =
  LangPublicActivitiesIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => LangPublicActivitiesRouteRoute,
  } as any)
const LangPublicActivitiesSearchRoute =
  LangPublicActivitiesSearchRouteImport.update({
    id: '/search',
    path: '/search',
    getParentRoute: () => LangPublicActivitiesRouteRoute,
  } as any)
const SitemapDotxmlServerRoute = SitemapDotxmlServerRouteImport.update({
  id: '/sitemap.xml',
  path: '/sitemap.xml',
  getParentRoute: () => rootServerRouteImport,
} as any)
const RssDotxmlServerRoute = RssDotxmlServerRouteImport.update({
  id: '/rss.xml',
  path: '/rss.xml',
  getParentRoute: () => rootServerRouteImport,
} as any)
const RobotsDottxtServerRoute = RobotsDottxtServerRouteImport.update({
  id: '/robots.txt',
  path: '/robots.txt',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$lang': typeof LangPublicRouteRouteWithChildren
  '/$lang/error': typeof LangErrorRoute
  '/$lang/not-found': typeof LangNotFoundRoute
  '/$lang/activities': typeof LangPublicActivitiesRouteRouteWithChildren
  '/$lang/': typeof LangPublicIndexRoute
  '/$lang/activities/search': typeof LangPublicActivitiesSearchRoute
  '/$lang/activities/': typeof LangPublicActivitiesIndexRoute
  '/$lang/all': typeof LangPublicAllIndexRoute
  '/$lang/flight': typeof LangPublicFlightIndexRoute
  '/$lang/hotels': typeof LangPublicHotelsIndexRoute
  '/$lang/rent-a-car': typeof LangPublicRentACarIndexRoute
  '/$lang/safari-tour': typeof LangPublicSafariTourIndexRoute
  '/$lang/tours': typeof LangPublicToursIndexRoute
  '/$lang/transfer': typeof LangPublicTransferIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$lang': typeof LangPublicIndexRoute
  '/$lang/error': typeof LangErrorRoute
  '/$lang/not-found': typeof LangNotFoundRoute
  '/$lang/activities/search': typeof LangPublicActivitiesSearchRoute
  '/$lang/activities': typeof LangPublicActivitiesIndexRoute
  '/$lang/all': typeof LangPublicAllIndexRoute
  '/$lang/flight': typeof LangPublicFlightIndexRoute
  '/$lang/hotels': typeof LangPublicHotelsIndexRoute
  '/$lang/rent-a-car': typeof LangPublicRentACarIndexRoute
  '/$lang/safari-tour': typeof LangPublicSafariTourIndexRoute
  '/$lang/tours': typeof LangPublicToursIndexRoute
  '/$lang/transfer': typeof LangPublicTransferIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$lang': typeof LangRouteWithChildren
  '/$lang/_public': typeof LangPublicRouteRouteWithChildren
  '/$lang/error': typeof LangErrorRoute
  '/$lang/not-found': typeof LangNotFoundRoute
  '/$lang/_public/activities': typeof LangPublicActivitiesRouteRouteWithChildren
  '/$lang/_public/': typeof LangPublicIndexRoute
  '/$lang/_public/activities/search': typeof LangPublicActivitiesSearchRoute
  '/$lang/_public/activities/': typeof LangPublicActivitiesIndexRoute
  '/$lang/_public/all/': typeof LangPublicAllIndexRoute
  '/$lang/_public/flight/': typeof LangPublicFlightIndexRoute
  '/$lang/_public/hotels/': typeof LangPublicHotelsIndexRoute
  '/$lang/_public/rent-a-car/': typeof LangPublicRentACarIndexRoute
  '/$lang/_public/safari-tour/': typeof LangPublicSafariTourIndexRoute
  '/$lang/_public/tours/': typeof LangPublicToursIndexRoute
  '/$lang/_public/transfer/': typeof LangPublicTransferIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$lang'
    | '/$lang/error'
    | '/$lang/not-found'
    | '/$lang/activities'
    | '/$lang/'
    | '/$lang/activities/search'
    | '/$lang/activities/'
    | '/$lang/all'
    | '/$lang/flight'
    | '/$lang/hotels'
    | '/$lang/rent-a-car'
    | '/$lang/safari-tour'
    | '/$lang/tours'
    | '/$lang/transfer'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$lang'
    | '/$lang/error'
    | '/$lang/not-found'
    | '/$lang/activities/search'
    | '/$lang/activities'
    | '/$lang/all'
    | '/$lang/flight'
    | '/$lang/hotels'
    | '/$lang/rent-a-car'
    | '/$lang/safari-tour'
    | '/$lang/tours'
    | '/$lang/transfer'
  id:
    | '__root__'
    | '/'
    | '/$lang'
    | '/$lang/_public'
    | '/$lang/error'
    | '/$lang/not-found'
    | '/$lang/_public/activities'
    | '/$lang/_public/'
    | '/$lang/_public/activities/search'
    | '/$lang/_public/activities/'
    | '/$lang/_public/all/'
    | '/$lang/_public/flight/'
    | '/$lang/_public/hotels/'
    | '/$lang/_public/rent-a-car/'
    | '/$lang/_public/safari-tour/'
    | '/$lang/_public/tours/'
    | '/$lang/_public/transfer/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LangRoute: typeof LangRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/robots.txt': typeof RobotsDottxtServerRoute
  '/rss.xml': typeof RssDotxmlServerRoute
  '/sitemap.xml': typeof SitemapDotxmlServerRoute
}
export interface FileServerRoutesByTo {
  '/robots.txt': typeof RobotsDottxtServerRoute
  '/rss.xml': typeof RssDotxmlServerRoute
  '/sitemap.xml': typeof SitemapDotxmlServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/robots.txt': typeof RobotsDottxtServerRoute
  '/rss.xml': typeof RssDotxmlServerRoute
  '/sitemap.xml': typeof SitemapDotxmlServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/robots.txt' | '/rss.xml' | '/sitemap.xml'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/robots.txt' | '/rss.xml' | '/sitemap.xml'
  id: '__root__' | '/robots.txt' | '/rss.xml' | '/sitemap.xml'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  RobotsDottxtServerRoute: typeof RobotsDottxtServerRoute
  RssDotxmlServerRoute: typeof RssDotxmlServerRoute
  SitemapDotxmlServerRoute: typeof SitemapDotxmlServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$lang': {
      id: '/$lang'
      path: '/$lang'
      fullPath: '/$lang'
      preLoaderRoute: typeof LangRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$lang/not-found': {
      id: '/$lang/not-found'
      path: '/not-found'
      fullPath: '/$lang/not-found'
      preLoaderRoute: typeof LangNotFoundRouteImport
      parentRoute: typeof LangRoute
    }
    '/$lang/error': {
      id: '/$lang/error'
      path: '/error'
      fullPath: '/$lang/error'
      preLoaderRoute: typeof LangErrorRouteImport
      parentRoute: typeof LangRoute
    }
    '/$lang/_public': {
      id: '/$lang/_public'
      path: '/$lang'
      fullPath: '/$lang'
      preLoaderRoute: typeof LangPublicRouteRouteImport
      parentRoute: typeof LangRoute
    }
    '/$lang/_public/': {
      id: '/$lang/_public/'
      path: '/'
      fullPath: '/$lang/'
      preLoaderRoute: typeof LangPublicIndexRouteImport
      parentRoute: typeof LangPublicRouteRoute
    }
    '/$lang/_public/activities': {
      id: '/$lang/_public/activities'
      path: '/activities'
      fullPath: '/$lang/activities'
      preLoaderRoute: typeof LangPublicActivitiesRouteRouteImport
      parentRoute: typeof LangPublicRouteRoute
    }
    '/$lang/_public/transfer/': {
      id: '/$lang/_public/transfer/'
      path: '/transfer'
      fullPath: '/$lang/transfer'
      preLoaderRoute: typeof LangPublicTransferIndexRouteImport
      parentRoute: typeof LangPublicRouteRoute
    }
    '/$lang/_public/tours/': {
      id: '/$lang/_public/tours/'
      path: '/tours'
      fullPath: '/$lang/tours'
      preLoaderRoute: typeof LangPublicToursIndexRouteImport
      parentRoute: typeof LangPublicRouteRoute
    }
    '/$lang/_public/safari-tour/': {
      id: '/$lang/_public/safari-tour/'
      path: '/safari-tour'
      fullPath: '/$lang/safari-tour'
      preLoaderRoute: typeof LangPublicSafariTourIndexRouteImport
      parentRoute: typeof LangPublicRouteRoute
    }
    '/$lang/_public/rent-a-car/': {
      id: '/$lang/_public/rent-a-car/'
      path: '/rent-a-car'
      fullPath: '/$lang/rent-a-car'
      preLoaderRoute: typeof LangPublicRentACarIndexRouteImport
      parentRoute: typeof LangPublicRouteRoute
    }
    '/$lang/_public/hotels/': {
      id: '/$lang/_public/hotels/'
      path: '/hotels'
      fullPath: '/$lang/hotels'
      preLoaderRoute: typeof LangPublicHotelsIndexRouteImport
      parentRoute: typeof LangPublicRouteRoute
    }
    '/$lang/_public/flight/': {
      id: '/$lang/_public/flight/'
      path: '/flight'
      fullPath: '/$lang/flight'
      preLoaderRoute: typeof LangPublicFlightIndexRouteImport
      parentRoute: typeof LangPublicRouteRoute
    }
    '/$lang/_public/all/': {
      id: '/$lang/_public/all/'
      path: '/all'
      fullPath: '/$lang/all'
      preLoaderRoute: typeof LangPublicAllIndexRouteImport
      parentRoute: typeof LangPublicRouteRoute
    }
    '/$lang/_public/activities/': {
      id: '/$lang/_public/activities/'
      path: '/'
      fullPath: '/$lang/activities/'
      preLoaderRoute: typeof LangPublicActivitiesIndexRouteImport
      parentRoute: typeof LangPublicActivitiesRouteRoute
    }
    '/$lang/_public/activities/search': {
      id: '/$lang/_public/activities/search'
      path: '/search'
      fullPath: '/$lang/activities/search'
      preLoaderRoute: typeof LangPublicActivitiesSearchRouteImport
      parentRoute: typeof LangPublicActivitiesRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/sitemap.xml': {
      id: '/sitemap.xml'
      path: '/sitemap.xml'
      fullPath: '/sitemap.xml'
      preLoaderRoute: typeof SitemapDotxmlServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/rss.xml': {
      id: '/rss.xml'
      path: '/rss.xml'
      fullPath: '/rss.xml'
      preLoaderRoute: typeof RssDotxmlServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/robots.txt': {
      id: '/robots.txt'
      path: '/robots.txt'
      fullPath: '/robots.txt'
      preLoaderRoute: typeof RobotsDottxtServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface LangPublicActivitiesRouteRouteChildren {
  LangPublicActivitiesSearchRoute: typeof LangPublicActivitiesSearchRoute
  LangPublicActivitiesIndexRoute: typeof LangPublicActivitiesIndexRoute
}

const LangPublicActivitiesRouteRouteChildren: LangPublicActivitiesRouteRouteChildren =
  {
    LangPublicActivitiesSearchRoute: LangPublicActivitiesSearchRoute,
    LangPublicActivitiesIndexRoute: LangPublicActivitiesIndexRoute,
  }

const LangPublicActivitiesRouteRouteWithChildren =
  LangPublicActivitiesRouteRoute._addFileChildren(
    LangPublicActivitiesRouteRouteChildren,
  )

interface LangPublicRouteRouteChildren {
  LangPublicActivitiesRouteRoute: typeof LangPublicActivitiesRouteRouteWithChildren
  LangPublicIndexRoute: typeof LangPublicIndexRoute
  LangPublicAllIndexRoute: typeof LangPublicAllIndexRoute
  LangPublicFlightIndexRoute: typeof LangPublicFlightIndexRoute
  LangPublicHotelsIndexRoute: typeof LangPublicHotelsIndexRoute
  LangPublicRentACarIndexRoute: typeof LangPublicRentACarIndexRoute
  LangPublicSafariTourIndexRoute: typeof LangPublicSafariTourIndexRoute
  LangPublicToursIndexRoute: typeof LangPublicToursIndexRoute
  LangPublicTransferIndexRoute: typeof LangPublicTransferIndexRoute
}

const LangPublicRouteRouteChildren: LangPublicRouteRouteChildren = {
  LangPublicActivitiesRouteRoute: LangPublicActivitiesRouteRouteWithChildren,
  LangPublicIndexRoute: LangPublicIndexRoute,
  LangPublicAllIndexRoute: LangPublicAllIndexRoute,
  LangPublicFlightIndexRoute: LangPublicFlightIndexRoute,
  LangPublicHotelsIndexRoute: LangPublicHotelsIndexRoute,
  LangPublicRentACarIndexRoute: LangPublicRentACarIndexRoute,
  LangPublicSafariTourIndexRoute: LangPublicSafariTourIndexRoute,
  LangPublicToursIndexRoute: LangPublicToursIndexRoute,
  LangPublicTransferIndexRoute: LangPublicTransferIndexRoute,
}

const LangPublicRouteRouteWithChildren = LangPublicRouteRoute._addFileChildren(
  LangPublicRouteRouteChildren,
)

interface LangRouteChildren {
  LangPublicRouteRoute: typeof LangPublicRouteRouteWithChildren
  LangErrorRoute: typeof LangErrorRoute
  LangNotFoundRoute: typeof LangNotFoundRoute
}

const LangRouteChildren: LangRouteChildren = {
  LangPublicRouteRoute: LangPublicRouteRouteWithChildren,
  LangErrorRoute: LangErrorRoute,
  LangNotFoundRoute: LangNotFoundRoute,
}

const LangRouteWithChildren = LangRoute._addFileChildren(LangRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LangRoute: LangRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  RobotsDottxtServerRoute: RobotsDottxtServerRoute,
  RssDotxmlServerRoute: RssDotxmlServerRoute,
  SitemapDotxmlServerRoute: SitemapDotxmlServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
